<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nick</title>
    <link>https://nick17t.github.io/</link>
    <description>Recent content on Nick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://nick17t.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://nick17t.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://nick17t.github.io/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;
&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>How to Prepare for an IT Interview</title>
      <link>https://nick17t.github.io/post/how-to-prepare-for-an-it-interview/</link>
      <pubDate>Tue, 19 May 2020 23:28:28 +0800</pubDate>
      
      <guid>https://nick17t.github.io/post/how-to-prepare-for-an-it-interview/</guid>
      
        <description>&lt;h3 id=&#34;面经之道&#34;&gt;面经之道&lt;/h3&gt;
&lt;p&gt;面经之术已经在牛客网上非常流行了，但这篇想讨论的是面经之术。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;校招技术岗的基础知识：&lt;/p&gt;
&lt;p&gt;​	数据库、 算法、操作系统、组成原理、网络&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;用什么思维来学习&#34;&gt;用什么思维来学习&lt;/h3&gt;
&lt;h4 id=&#34;1-记忆并理解&#34;&gt;1. 记忆并理解&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt; 1. 是什么，由哪几部分组成，基于什么需求组成

 2. 跟什么有关，为什么有关

    Q: HTTP是什么？

    &amp;gt; 实际问的是如何用密码学的知识实现一套通讯加密的协议
    
    &amp;gt; HTTPS，是一个应用层的加密协议，它用到了密码学相关知识
    
    &amp;gt; 首先为了双方加密通话有对称加密，引入对称加密就要进行密钥交换，所以有非对称加密，也就是公私钥体制，引入公私钥体制，就要涉及到确认这个公钥是对方的，所以就有了数字签名和证书体制，有了这套体制，我们想要知道这套消息的完整性，于是就有了哈希检查。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h4 id=&#34;2-体系化&#34;&gt;2. 体系化&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1. 聊到时可以产生联想

2. 联想数据结构，联想到各种规则。

    Q: 请你聊聊数据库的索引

    &amp;gt;索引是查找结构，一切可以做查找操作的数据结构都可以实现(哈希表, 跳表, 搜索树)。
    
    &amp;gt;比如Mysql的，innodb的b+树倒排，利用了硬盘的特征，内存的特征。
    
    - 加索引有哪些原则( 最大区分度, 最左前准, 联合索引顺序)
    
    - 加索引有什么代价，维护的代价
    
    - 加索引要注意什么
    
    - 索引什么时候会失效
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h4 id=&#34;3-框架化&#34;&gt;3. 框架化&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1. 认识到更本质的东西其实是一回事

1. 计算机本质就是复读机，就是把那些知识来回不断地重复。

    1. 操作系统内存管理机制，python，jvm都是类似的实现，只是参数不同。其本质就是通过控制业务需求，来分配最合适的内存块 以提供速度。

    2. 比如操作系统和浏览器其实一回事；数据库和操作系统的文件系统也类似，数据库本身就是对文件系统的一次复读，日志设计，存储设计都一样，只是适用了不同的业务要求。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h3 id=&#34;学习的核心&#34;&gt;学习的核心&lt;/h3&gt;
&lt;h4 id=&#34;重复&#34;&gt;重复&lt;/h4&gt;
&lt;p&gt;​	如果不是天才， 很少有人在第一次学习某个知识的时候，就掌握他。 不断的重复，让陌生的概念变得熟悉，不断的收敛让知识形成框架，框架可以让你快速的收悉新的知识。 然而，重复是枯燥的，是反人性的。而能让人得到乐趣而坚持下来重复，靠的就是&lt;strong&gt;正反馈&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;正反馈&#34;&gt;正反馈&lt;/h4&gt;
&lt;p&gt;带着正反馈去学习即&lt;strong&gt;能让我们做到以前做不到的事情，和解决自己一直困惑的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先能学一些快速出来成果的东西, 让人可以用保持兴趣(&lt;strong&gt;正反馈&lt;/strong&gt;), 并且在学习过程中留下一些问题.&lt;/li&gt;
&lt;li&gt;带着问题, 去学习难以下咽的基础, 因为之前在做好上手的东西过程中用哪个了这些基础知识的应用, 对基础产生了熟悉的感觉(&lt;strong&gt;重复&lt;/strong&gt;), 并且在学习过程解决了之前遗留的问题(&lt;strong&gt;正反馈&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;学完基础后, 可以把之前做的成果往高级做(&lt;strong&gt;正反馈&lt;/strong&gt;), 并且产生新的疑问, 再回头看之前遗漏的基础(&lt;strong&gt;重复&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title>Distribute Candies to People</title>
      <link>https://nick17t.github.io/post/distribute-candies-to-people/</link>
      <pubDate>Thu, 05 Mar 2020 23:42:19 +0800</pubDate>
      
      <guid>https://nick17t.github.io/post/distribute-candies-to-people/</guid>
      
        <description>&lt;h2 id=&#34;分糖果&#34;&gt;分糖果&lt;/h2&gt;
&lt;h3 id=&#34;题目卡片&#34;&gt;题目卡片&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;时间： 2020-03-05&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;题目链接：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tag：math&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;思路&#34;&gt;思路&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;题目挺简单的，按着题目描述来可暴力求解。&lt;/p&gt;
&lt;p&gt;&amp;quot;对小朋友们进行遍历，每次都发小朋友们应得数量的糖，直到剩下的糖不足以分发应得数量，就直接给最后那位倒霉孩子。&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Solution&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;distributeCandies&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; candies&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; num_people&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;num_people&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;/* 1.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;		while(candies!=0){
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;          int n = i+1;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;            if(n&amp;lt;=candies){
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                ans[i%num_people] += n;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                candies -= n; 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;            }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;            else{
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                ans[i%num_people] += candies;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;                break; 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;            }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;            i++;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;*/&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;candies&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;	 
        	ans&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; num_people&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; Math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;candies&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; n&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            candies &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; Math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;min&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;candies&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;/* 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        *  取candies（现有糖果数量）和n（按规则应获得的需要糖果数量）中的最小值，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        *  给第 i%num_people (轮到的第几位小朋友)，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        *  +=  累加每一轮所发的新糖果，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        *  min的作用是当糖果不够用时，全送给那个小朋友，
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        *  与此同时，candies数量减去已送出的数量。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;        */&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;扩展&#34;&gt;扩展&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这个的标签是Math，所以肯定是有相关的数学公式能帮忙省事儿。&lt;/p&gt;
&lt;p&gt;leetCode中@&lt;a href=&#34;https://leetcode-cn.com/u/quantumdriver/&#34;&gt;QuantumDriver&lt;/a&gt;给出详细解释，不在此赘述。&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
  </channel>
</rss>
