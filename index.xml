<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nick</title>
    <link>https://nick17t.github.io/</link>
    <description>Recent content on Nick</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://nick17t.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://nick17t.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://nick17t.github.io/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;
&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>The Importance of Algorithms</title>
      <link>https://nick17t.github.io/post/the-importance-of-algorithms/</link>
      <pubDate>Mon, 18 May 2020 00:15:16 +0800</pubDate>
      
      <guid>https://nick17t.github.io/post/the-importance-of-algorithms/</guid>
      
        <description>&lt;p&gt;​	对于一家企业来说，最核心的竞争力在于给客户提供价值。那么如何在算法和价值之间建立好的联系，这个是非常关键的，我始终持有这样的观点，“业务驱动技术，技术服务业务。” 优秀的代码和算法才可以提升企业竞争力，帮企业把成本降下来，比方说现在的人工智能方向，企业为了给社会创造10个亿的价值，花费了100个亿的计算资源，这就得不偿失了；但如果优化的代码，优化的体系结构可以把计算资源下降到10亿以下，这样就非常合适了。&lt;/p&gt;
&lt;p&gt;​	说到人工智能，算法导论中的动态规划，贪心这些常规算法和人工智能中KNN，朴素贝叶斯这些机器学习算法，我都有过接触，本质上来说，这两者却是完全不同的分支。但这就像搭积木一样，想要提出神经网络的架构，算法导论中的算法是底下最坚实的木块。所以在刷LeetCode时，除了自己提交代码外，也要去关注别人的优秀题解，如何将一个O(n^2)的算法优化成O(n)，这也非常重要，要不断地学习让代码优化，让代码优雅。&lt;/p&gt;
&lt;p&gt;​	算法的重要性不言而喻，从普通的码农做到中高层管理人员，没有人可以不掌握算法。中高层人员可能比较少去实践具体的算法，但是他们是把握方向的人。首先只有对算法知识有一定的底蕴，才能去甄别企业进来的人员是否合适，其次也只有对算法烂熟于心，才能去选择出更加能有切实可行性的项目方向。&lt;/p&gt;
&lt;p&gt;​	因此可以得出，算法不仅作用于面试与找工作，在整个职业发展的路径上来看，作用都是贯穿始终的。写这些也是为了警醒自己，不要有畏难情绪，意识到重要性后，更重要目标导向的付出相应行动；而且不要局限于LeetCode刷题，应该更系统性的去学习这门课。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>What Are the QA Interview Questions</title>
      <link>https://nick17t.github.io/post/what-are-the-qa-interview-questions/</link>
      <pubDate>Sun, 17 May 2020 16:44:16 +0800</pubDate>
      
      <guid>https://nick17t.github.io/post/what-are-the-qa-interview-questions/</guid>
      
        <description>&lt;h2 id=&#34;面试重点&#34;&gt;面试重点&lt;/h2&gt;
&lt;p&gt;​	除了软件测试的相关知识外，数据结构与算法也很重要。其次linux的使用、数据库的熟悉程度也很重要。&lt;/p&gt;
&lt;p&gt;​	数据结构和算法是较难速成的科目，我们先从简单的linux命令写起，获得成就感，来增强自信心。&lt;/p&gt;
&lt;h3 id=&#34;linux命令&#34;&gt;linux命令&lt;/h3&gt;
&lt;p&gt;​	我是通过VMware WorkStation创建的Ubuntu虚拟机环境，当然也可以采用搭建云服务器，或者两块SSD做双系统的方法。linux命令主要包括以下几个分类。&lt;/p&gt;
&lt;h4 id=&#34;1-文件管理&#34;&gt;1. 文件管理&lt;/h4&gt;
&lt;p&gt;​	首先我们应当对绝对路径和相对路径有所了解:&lt;/p&gt;
&lt;p&gt;​	以user/nick/download这个目录为例&lt;/p&gt;
&lt;p&gt;​	绝对路径：由根目录/写起，例如：/user/nick/download
​	相对路径：顾名思义，例如：由 /user/nick/download到/user/nick/music底下时，写成：cd.music&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ls命令 		   —— 		    显示指定工作目录下的内容及属性信息&lt;/li&gt;
&lt;li&gt;mkdir命令     —— 	        创建目录&lt;/li&gt;
&lt;li&gt;cp命令           —— 	        复制文件或目录&lt;/li&gt;
&lt;li&gt;mv命令          ——	 	    移动或改名文件&lt;/li&gt;
&lt;li&gt;pwd命令        —— 		    显示当前路径&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2--文档编辑&#34;&gt;2.  文档编辑&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;cat命令 		—— 		     在终端设备上显示文件内容&lt;/li&gt;
&lt;li&gt;echo命令 	 —— 		     输出字符串或提取Shell变量的值&lt;/li&gt;
&lt;li&gt;rm命令 		 —— 		     移除文件或目录&lt;/li&gt;
&lt;li&gt;tail命令  		—— 		     查看文件尾部内容&lt;/li&gt;
&lt;li&gt;rmdir命令      —— 		     删除空目录&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Newbie</title>
      <link>https://nick17t.github.io/post/newbie-need-to-know/</link>
      <pubDate>Mon, 11 May 2020 13:57:53 +0800</pubDate>
      
      <guid>https://nick17t.github.io/post/newbie-need-to-know/</guid>
      
        <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;程序员薪资：一线大厂薪资最高15k起步，一线创业公司10k起步，三四线5k~8k。
总结：毕业后有能力尽量要往一线城市打拼。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;互联网企业是否有前途：肯定是有前途的，中国制造，大数据，区块链，面向5g,AR,VR,都是比较有前途的行业，人工智能目前来说起步较高，博士开招，大学期间尽量避开：前端开发、php、java等单纯的开发，社会上的培训班在单纯的开发方面优势明显。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大学生适合做程序员吗：一定要按自己的兴趣去选专业，实在迷茫可以先学着，或许学着学着就感兴趣了，实在不喜欢一定要及早换系换专业。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大学期间应该做什么：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;首先注重基础课程的学习，高数英语都非常重要。&lt;/li&gt;
&lt;li&gt;其次学精通一门语言，何为精通，掌握百分之90以上的API，GO语言目前发展势头不错，可以从现在开始琢磨，四年后会有不错的收获。&lt;/li&gt;
&lt;li&gt;掌握数据结构、算法，这是和培训机构拉开差距的地方。&lt;/li&gt;
&lt;li&gt;数据库，SQL或NoSQL，人工智能和大数据最后都要操作数据库，一定要把一个数据库学精通。&lt;/li&gt;
&lt;li&gt;学好网络原理，5、7层结构，IP规划，UDP,TCP,HTTP,DHCP,DNS，ARP 等等很多理论，层次越高接触越多，软件高性能高并发。&lt;/li&gt;
&lt;li&gt;认认真真仔仔细细做好一个项目，并持续维护，从最简单的博客做起，一点点随着知识的增长去维护博客&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;p&gt;如何找到适合自己的领域：多去参加研讨会，认识多专业领域的人才。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序员的基本分工：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;算法工程师 机器学习，图像处理 适合爱研究耐得住寂寞的一群人&lt;/li&gt;
&lt;li&gt;客户端开发工程师 IOS 安卓 前端 开发 培训班大量输出这些人才。&lt;/li&gt;
&lt;li&gt;研发工程师，后端开发C,C++ JAVA，做中间件，服务器端，用户看不到的逻辑处理，往后发展架构师&lt;/li&gt;
&lt;li&gt;数据研发工程师，与大数据相关，要有程序员背景，统计学背景 五，测试工程师，代码测试，检验软件是否通过测试，不建议往这方面发展，目前自动化测试不断发展，有淘汰风险&lt;/li&gt;
&lt;li&gt;安全工程师，处理系统安全隐患，掌握多门语言，知识面广 七、UED工程师，适合女孩子，属于美工与代码结合&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;
&lt;p&gt;大学生程序员是否考研：有能力一定要考，考上了一定要努力学习！最后拼的还是动手能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平庸的生活方式是麻醉药。他只会束缚你,让你没有作为,甚至没有出息地度过大学的四年。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://nick17t.github.io/post/interview-prepration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nick17t.github.io/post/interview-prepration/</guid>
      
        <description>&lt;h2 id=&#34;秋招季&#34;&gt;秋招季&lt;/h2&gt;
&lt;p&gt;​	又是一年秋招季，在正确的时间做正确的事情。————在秋招就结束一切。&lt;/p&gt;
&lt;h2 id=&#34;合理定位&#34;&gt;合理定位&lt;/h2&gt;
&lt;p&gt;​	从大一的C语言课设大作业，到大二时对python的试水，在机器学习方向的比赛获奖，并发表了论文、申请了专利，大三时跟随学校的培养计划，学习了Java Web的开发。&lt;/p&gt;
&lt;p&gt;​	在经历各种跌跌撞撞的探索后，停下来思考，觉得相比起从0到1的后端开发，把0.9，1.1 拨正成为合格的1会更加贴合我的好奇、想尝试并突破，追求更优雅产品的个性。&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&#34;夯实基础&#34;&gt;夯实基础&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;明确知识体系&lt;/p&gt;
&lt;p&gt;测试开发的知识体系并不像Java Web那样明晰全面，如果是后台开发，就要对数据库有相应的把握；如果偏底层架构，就要掌握好操作系统和计算机网络。&lt;/p&gt;
&lt;p&gt;可惜的是，测试开发工程师的求职技能树并没有这么清晰。以下是我所思考的应该有的准备。毕竟明确了自己要学什么，才能有的放矢，合理高效的管理好自己的时间和精力。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;注重学习性价比&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实也不光是求职，任何时候都应该把精力花在最值得的地方，要意识到时间是自己最珍贵的事物。在这黄金的时间掌握更多有价值的知识就重中之重了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;整理简历&#34;&gt;整理简历&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简历是非常重要的东西，三分做，七分写。不然都不会被人看见。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;项目经历&lt;/p&gt;
&lt;p&gt;github开源项目自己寻思&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面试首先选择不会去的公司试水，多尝试但不盲目，不完全海投。面试评价是很重要的，要珍惜每次面试机会。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;校招系统每次写作都要整理好，备下次使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面试时面试官的态度/其他人的offer/都与自己无关，也是我无法改变的，要好好的调整心态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;灵活调整&#34;&gt;灵活调整&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;失利时一定要及时填补上自己的短处，并积极总结经验。遇到挫折和失败时，也要及时反思和鼓励自己。
2. 在笔试之后，把遇到的问题分类总结。&lt;/li&gt;
&lt;li&gt;面试官通过简历认识自己，那么自己也要通过面试官重新设计简历。通过面试官询问侧重点，挖掘出自己简历上最亮点的部分，同时避免一些雷点。比如列举的技术栈，面试官总是对你某个不熟悉的地方提问时，就要考虑删掉它。&lt;/li&gt;
&lt;li&gt;面试比笔试更加重要，要牢牢抓住它。&lt;/li&gt;
&lt;li&gt;调整好心态，求职中总会遇到各种各样的难题，每个人都会遇到困难，每个人处理问题的态度和方式都各不相同，保持良好的心态，遇到困境也不慌张，不自暴自弃，不破罐子破摔。从容的面对，给自己更多的信心，遇到顺境也不骄不躁，稳中求胜，适当放低姿态。轻松的状态更容易发挥好的水平。&lt;/li&gt;
&lt;li&gt;真人内推（直接到部门，绕过一些门槛）把简历给这个人，并且这个人一定会认真看你的简历，能帮你直接推到内推。牛客关键词：部门直推。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;​	秋招是战役，采用的战略决定了成败与否。从各个时期，规划好自己的计划，不急不躁，稳中求胜。 根据软件测试开发制作好简历，补足知识。保持良好的心态，通过面试和笔试提高自己的能力，从而获得理想的offer。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://nick17t.github.io/post/object-oriented_programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nick17t.github.io/post/object-oriented_programming/</guid>
      
        <description>&lt;h1 id=&#34;面向对象编程笔记&#34;&gt;面向对象编程笔记&lt;/h1&gt;
&lt;h5 id=&#34;基本概念&#34;&gt;基本概念&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;实现方式&#34;&gt;实现方式&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;继承&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多态&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;java本身机制&#34;&gt;Java本身机制&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;package&lt;/li&gt;
&lt;li&gt;classpath&lt;/li&gt;
&lt;li&gt;jar&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;java标准库提供的核心类&#34;&gt;java标准库提供的核心类&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;li&gt;包装类型&lt;/li&gt;
&lt;li&gt;JavaBean&lt;/li&gt;
&lt;li&gt;枚举&lt;/li&gt;
&lt;li&gt;常用工具类&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;面向对象基础&#34;&gt;面向对象基础&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基础小结:&lt;/p&gt;
&lt;p&gt;在OOP中，&lt;code&gt;class&lt;/code&gt;和&lt;code&gt;instance&lt;/code&gt;是“模版”和“实例”的关系；&lt;/p&gt;
&lt;p&gt;定义&lt;code&gt;class&lt;/code&gt;就是定义了一种数据类型，对应的&lt;code&gt;instance&lt;/code&gt;是这种数据类型的实例；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class&lt;/code&gt;定义的&lt;code&gt;field&lt;/code&gt;，在每个&lt;code&gt;instance&lt;/code&gt;都会拥有各自的&lt;code&gt;field&lt;/code&gt;，且互不干扰；&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;new&lt;/code&gt;操作符创建新的&lt;code&gt;instance&lt;/code&gt;，然后用变量指向它，即可通过变量来引用这个&lt;code&gt;instance&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;访问实例字段的方法是&lt;code&gt;变量名.字段名&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;指向&lt;code&gt;instance&lt;/code&gt;的变量都是引用变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法可以让外部代码安全地访问实例字段；&lt;/li&gt;
&lt;li&gt;方法是一组执行语句，并且可以执行任意逻辑；&lt;/li&gt;
&lt;li&gt;方法内部遇到return时返回，void表示不返回任何值（注意和返回null不同）；&lt;/li&gt;
&lt;li&gt;外部代码通过public方法操作实例，内部代码可以调用private方法；&lt;/li&gt;
&lt;li&gt;理解方法的参数绑定。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本类型&lt;/strong&gt;参数的传递，是调用方法值的复制。双方各自的后续修改，互不影响。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用类型&lt;/strong&gt;参数的传递，调用方的变量，和接收方的参数变量，指向的是同一个对象。双方任意一方对这个对象的修改，都会影响对方（因为指向同一个对象嘛）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.csdn.net/xyphf/article/details/78117027&#34;&gt;详解Java传参&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造方法小结&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;实例在创建时通过&lt;code&gt;new&lt;/code&gt;操作符会调用其对应的构造方法，构造方法用于初始化实例；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;没有定义构造方法时，编译器会自动创建一个默认的无参数构造方法；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以定义多个构造方法，编译器根据参数自动判断；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在一个构造方法内部调用另一个构造方法，便于代码复用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;方法重载小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方法重载是指多个方法的方法名相同，但各自的参数不同；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重载方法应该完成类似的功能，参考&lt;code&gt;String&lt;/code&gt;的&lt;code&gt;indexOf()&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重载方法返回值类型应该相同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;继承小结&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多态小结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加上&lt;code&gt;@Override&lt;/code&gt;可以让编译器帮助检查是否进行了正确的覆写。希望进行覆写，但是不小心写错了方法签名，编译器会报错。&lt;/li&gt;
&lt;li&gt;子类可以覆写父类的方法（Override），覆写在子类中改变了父类方法的行为；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;修饰的方法可以阻止被覆写；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;修饰的class可以阻止被继承；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;修饰的field必须在创建对象时初始化，随后不可修改。小结&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抽象类小结&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;this变量&#34;&gt;this变量&lt;/h5&gt;
&lt;p&gt;在方法内部，可以使用一个隐含的变量&lt;code&gt;this&lt;/code&gt;，它始终指向当前实例。因此，通过&lt;code&gt;this.field&lt;/code&gt;就可以访问当前实例的字段。&lt;/p&gt;
&lt;p&gt;如果没有命名冲突，可以省略&lt;code&gt;this&lt;/code&gt;。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Person {
    private String name;

    public String getName() {
        return name; // 相当于this.name
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是，如果有局部变量和字段重名，那么局部变量优先级更高，就必须加上&lt;code&gt;this&lt;/code&gt;：&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://nick17t.github.io/post/tips_of_serachshortcuts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nick17t.github.io/post/tips_of_serachshortcuts/</guid>
      
        <description>&lt;h2 id=&#34;提升搜索能力&#34;&gt;提升搜索能力&lt;/h2&gt;
&lt;p&gt;一、基本搜索  （与或非）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;与     &amp;ldquo;+&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通常情况下，无需用 + 表示“与”，空格就足够了&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;或     &amp;ldquo;OR&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以用OR关键字搜索，例 Binary Search OR Binary Sort&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;非      &amp;ldquo;-&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用时，当你厌倦看到csdn的文章时，可以使用  排序算法 -CSDN 这样的搜索关键字&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;模糊查询&lt;/p&gt;
&lt;p&gt;中间字可以用 * 号替代，如乘风*浪，可以搜索出乘风破/作/兴浪&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“ ”完全匹配查询&lt;/p&gt;
&lt;p&gt;顾名思义，查找完全和关键词匹配的结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、词句搜索&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;关键词是词组时，可以空格搜索&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关键词是句子是，就要加上引号  &amp;ldquo;no sana no life&amp;rdquo;，即上面的完全匹配查询&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;三、进阶搜索&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;site 表示只查找限定网站的内容   例：年收入 site:zhihu.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;inurl 表示搜索的关键词在url中出现的网页内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;filetype 表示查找特定的文件格式&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;常用网站&#34;&gt;常用网站&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;scihub&lt;/p&gt;
&lt;p&gt;不用你在学校或者是其他科研机构的权限，就可以让普通人或者是学生接触到最新的文献&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;oalib&lt;/p&gt;
&lt;p&gt;oalib文献检索神器。OALib提供的开源论文超过4,219,598篇，涵盖所有学科。所有文章均可免费下载&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;win10快捷键&#34;&gt;WIN10快捷键&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;快捷键&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;WIN+A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打开操作中心&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;WIN+S&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打开搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;WIN+K&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打开蓝牙快速连接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;WIN+D&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示桌面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;WIN+M&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;最小化窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;WIN+V&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打开剪切板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;WIN+；&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;调出emoji&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;WIN+Shif+S&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;截图功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Win + Ctrl + D&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;创建虚拟桌面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Win + Ctrl + F4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;关闭当前虚拟桌面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Win + Ctrl + ←&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;向左切换虚拟桌面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Win + Ctrl + →&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;向右切换虚拟桌面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
      
    </item>
    
  </channel>
</rss>
